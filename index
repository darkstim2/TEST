<!doctype html>
<html lang="ru">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
  <title>NeoLab [BLUE]</title>
  <meta name="theme-color" content="#061427"/>
  <style>
    /* ---------- Neo‑киберпанк (синие оттенки), mobile‑first ---------- */
    :root{
      --bg-0:#050a14;
      --bg-1:#071125;
      --panel:rgba(12,24,48,.55);
      --panel-strong:rgba(14,28,56,.75);
      --txt:#ffffff; /* Изменено на чисто белый */
      --muted:#a5c4ff;
      --dim:#7aa4dd;
      --primary:#37a6ff;
      --primary-2:#70c2ff;
      --accent:#9be7ff;
      --danger:#ff3b6b;
      --good:#27efb4;
      --warn:#ffd166;
      --border:#1e4ea1;
      --glow:0 0 12px rgba(55,166,255,.55), inset 0 0 24px rgba(55,166,255,.08);
      --radius:16px;
      --radius-sm:12px;
      --gap:12px;
      --mono: ui-monospace, SFMono-Regular, Menlo, Consolas, "Liberation Mono", monospace;
      --sans: system-ui, -apple-system, Segoe UI, Roboto, Inter, Arial, sans-serif;
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{
      margin:0;
      color:var(--txt);
      font: 15px/1.45 var(--sans);
      background:
        radial-gradient(1200px 700px at 70% -10%, #0a2a55 0%, transparent 60%),
        radial-gradient(800px 500px at -10% 90%, #001a40 0%, transparent 60%),
        linear-gradient(180deg, var(--bg-0), var(--bg-1));
      background-attachment: fixed;
      overflow:hidden;
    }

    /* Subtle CRT/scanline layer */
    .scanlines::before{
      content:"";
      position:fixed; inset:0;
      background: repeating-linear-gradient( to bottom, rgba(255,255,255,.02), rgba(255,255,255,.02) 2px, transparent 2px, transparent 4px );
      pointer-events:none;
      mix-blend-mode:overlay;
    }
    
    /* Новый эффект - частицы */
    #particles {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: -1;
      pointer-events: none;
    }
    
    .particle {
      position: absolute;
      width: 2px;
      height: 2px;
      background-color: var(--primary);
      border-radius: 50%;
      opacity: 0.3;
      animation: float 15s infinite linear;
    }
    
    @keyframes float {
      0% {
        transform: translateY(0) translateX(0);
        opacity: 0;
      }
      10% {
        opacity: 0.5;
      }
      90% {
        opacity: 0.3;
      }
      100% {
        transform: translateY(-100vh) translateX(20vw);
        opacity: 0;
      }
    }

    /* Layout */
    .app{ position:relative; height:100dvh; display:grid; grid-template-rows:auto 1fr auto; }
    header{
      height:56px;
      padding:10px 14px;
      display:flex; align-items:center; gap:12px;
      background: linear-gradient(180deg, rgba(12,24,48,.9), rgba(8,16,32,.8));
      border-bottom:1px solid var(--border);
      box-shadow: var(--glow);
      position:sticky; top:0; z-index:5;
    }
    header .logo {
      font-family: var(--mono);
      color: var(--primary);
      font-size: 18px;
      letter-spacing: 1px;
      text-shadow: 0 0 10px var(--primary);
    }
    header h1{ font-weight:700; font-size:15px; margin:0; letter-spacing:.4px}
    header .sub{ color:var(--muted); font-size:12px }

    main{
      position:relative; overflow:auto; padding:14px; scroll-behavior:smooth;
    }

    .panel{
      background: var(--panel);
      border:1px solid var(--border);
      border-radius:var(--radius);
      padding:14px;
      box-shadow: var(--glow);
      backdrop-filter: blur(10px) saturate(120%);
      margin-bottom:12px;
      position: relative;
      overflow: hidden;
    }
    
    .panel::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 1px;
      background: linear-gradient(90deg, transparent, var(--primary), transparent);
      box-shadow: 0 0 8px var(--primary);
    }
    
    .panel h2{
      margin:0 0 8px 0; font-size:16px; letter-spacing:.3px;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    .muted{ color:var(--muted) }
    .row{ display:flex; gap:10px; align-items:center; flex-wrap:wrap; }
    .chips{ display:flex; gap:8px; flex-wrap:wrap }
    .chip{
      border:1px solid var(--border);
      border-radius:999px; padding:8px 10px; font:600 12px var(--mono);
      background: linear-gradient(180deg, rgba(20,38,76,.55), rgba(10,22,54,.5));
      box-shadow: var(--glow);
    }

    .btn{
      display:flex; align-items:center; justify-content:center;
      gap:8px;
      width:100%;
      padding:13px 14px;
      border-radius:var(--radius-sm);
      border:1px solid var(--border);
      color:var(--txt); /* Убедимся, что текст белый */
      background:linear-gradient(180deg, rgba(24,48,96,.65), rgba(10,22,54,.6));
      box-shadow: var(--glow);
      font-weight:700;
      letter-spacing:.2px;
      transition: all .15s ease;
      text-align:center;
      position: relative;
      overflow: hidden;
    }
    
    .btn::before {
      content: "";
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(55,166,255,.2), transparent);
      transition: left 0.5s;
    }
    
    .btn:hover::before {
      left: 100%;
    }
    
    .btn:active{ transform: scale(.98) }
    .btn--ghost{ background:transparent }
    .btn--primary{ background:linear-gradient(180deg, rgba(55,166,255,.28), rgba(55,166,255,.12)); }
    .btn--danger{ background:linear-gradient(180deg, rgba(255,59,107,.25), rgba(255,59,107,.12)); border-color:#8a2240 }
    .btn--good{ background:linear-gradient(180deg, rgba(39,239,180,.25), rgba(39,239,180,.12)); border-color:#1b7d63 }

    .grid-2{ display:grid; grid-template-columns:1fr 1fr; gap:10px }
    .kpi{ display:flex; align-items:center; justify-content:space-between; padding:8px 10px; border-radius:10px;
          border:1px dashed var(--border); background:rgba(12,24,48,.45); font: 600 13px var(--mono); }
    .kpi strong{ font: 700 16px var(--mono); }

    /* Bottom nav (like Telegram keyboard) */
    nav{
      padding:10px; display:grid; grid-template-columns:1fr 1fr 1fr; gap:10px;
      background:linear-gradient(180deg, rgba(8,16,32,.4), rgba(8,16,32,.85));
      border-top:1px solid var(--border);
      box-shadow: var(--glow);
    }
    .nav-btn{
      border-radius:14px; border:1px solid var(--border);
      background:linear-gradient(180deg, rgba(16,34,70,.7), rgba(10,22,54,.7));
      padding:12px;
      font-weight:700; letter-spacing:.2px;
      display:flex; flex-direction: column; align-items:center; justify-content:center; gap:4px;
      text-align:center;
      color: var(--txt); /* Убедимся, что текст белый */
      transition: all 0.2s ease;
    }
    .nav-btn.active{ 
      outline:2px solid var(--primary); 
      box-shadow:0 0 0 4px rgba(55,166,255,.12);
      background:linear-gradient(180deg, rgba(55,166,255,.3), rgba(10,22,54,.7));
    }
    .nav-btn small{ color:var(--dim); font-weight:600; font-size: 10px; }

    /* Progress bar */
    .progress{ height:10px; border-radius:8px; background:rgba(255,255,255,.06); overflow:hidden; border:1px solid var(--border) }
    .progress > b{ display:block; height:100%; width:0%; background:linear-gradient(90deg, var(--primary), var(--accent)); box-shadow:0 0 20px rgba(55,166,255,.6) inset }

    /* List items */
    .item{ display:flex; gap:10px; align-items:center; padding:10px; border:1px solid var(--border);
           border-radius:12px; background:rgba(14,28,56,.45); }
    .item .meta{ font:600 12px var(--mono); color:var(--muted) }
    .price{ font:700 13px var(--mono); color:var(--primary-2) }

    /* Inputs */
    .field{ display:grid; gap:6px }
    .field label{ font:600 12px var(--mono); color:var(--dim) }
    input[type=number], input[type=text], select{
      width:100%; border-radius:12px; border:1px solid var(--border); padding:12px 12px;
      background:rgba(10,22,54,.6); color:var(--txt); font-weight:600;
      box-shadow: var(--glow);
    }
    .note{ font:600 12px var(--mono); color:var(--muted) }
    
    /* ASCII Art */
    .ascii-art {
      font-family: var(--mono);
      color: var(--primary);
      white-space: pre;
      font-size: 8px;
      line-height: 1;
      text-align: center;
      margin: 10px 0;
      text-shadow: 0 0 5px var(--primary);
      opacity: 0.8;
    }

    /* Toast */
    .toast{ position:fixed; left:50%; bottom:84px; transform:translateX(-50%);
            background:rgba(16,32,64,.9); color:var(--txt); border:1px solid var(--border);
            padding:12px 14px; border-radius:12px; box-shadow: var(--glow); z-index:99; display:none }
    .toast.show{ display:block; animation: pop .25s ease }
    @keyframes pop{ from{ transform:translateX(-50%) scale(.95); opacity:0 } to{ transform:translateX(-50%) scale(1); opacity:1 }}

    /* Terminal text effect */
    .terminal-text {
      font-family: var(--mono);
      color: var(--primary);
      overflow: hidden;
      border-right: 2px solid var(--primary);
      white-space: nowrap;
      animation: typing 3.5s steps(40, end), blink-caret 0.75s step-end infinite;
    }
    
    @keyframes typing {
      from { width: 0 }
      to { width: 100% }
    }
    
    @keyframes blink-caret {
      from, to { border-color: transparent }
      50% { border-color: var(--primary) }
    }

    /* Tiny helpers */
    .spacer{ height:4px }
    .mt-8{ margin-top:8px }
    .mt-12{ margin-top:12px }
    .mt-16{ margin-top:16px }
    .mt-24{ margin-top:24px }
    
    /* Decorative elements */
    .cyber-line {
      height: 1px;
      background: linear-gradient(90deg, transparent, var(--primary), transparent);
      margin: 10px 0;
      box-shadow: 0 0 8px var(--primary);
    }
    
    .hacker-text {
      font-family: var(--mono);
      color: var(--primary);
      text-shadow: 0 0 5px var(--primary);
    }

    /* Safe-areas (iPhone) */
    nav{ padding-bottom: calc(10px + env(safe-area-inset-bottom)); }
    header{ padding-top: calc(10px + env(safe-area-inset-top)); height: calc(56px + env(safe-area-inset-top)); }
  </style>
</head>
<body class="scanlines">
  <div id="particles"></div>
  
  <div class="app" id="app">
    <header>
      <div class="logo">[NEO]</div>
      <div>
        <h1>NeoLab <span class="muted">[BLUE]</span></h1>
        <div class="sub" id="subtitle">
          <span class="terminal-text">>> СИСТЕМА АКТИВИРОВАНА // РЕЖИМ БЕТА</span>
        </div>
      </div>
    </header>

    <main id="view" tabindex="-1" aria-live="polite"></main>

    <nav id="nav">
      <!-- 6 кнопок как в Telegram‑клавиатуре -->
      <button class="nav-btn" data-view="processor"><span>⚙️</span><span>Процессор</span><small>Данные</small></button>
      <button class="nav-btn" data-view="mods"><span>🧬</span><span>Моды</span><small>Генетика</small></button>
      <button class="nav-btn" data-view="lab"><span>☢️</span><span>Лаборатория</span><small>Исследования</small></button>
      <button class="nav-btn" data-view="shop"><span>➕</span><span>Бутик</span><small>Импланты</small></button>
      <button class="nav-btn" data-view="format"><span>♻️</span><span>Формат</span><small>Система</small></button>
      <button class="nav-btn" data-view="god"><span>✨</span><span>Бог</span><small>Помощь</small></button>
    </nav>
  </div>

  <div class="toast" id="toast" role="status" aria-live="polite"></div>

  <script>
  // ---------- State & Storage ----------
  const $ = (sel, el=document)=>el.querySelector(sel);
  const $$ = (sel, el=document)=>Array.from(el.querySelectorAll(sel));

  // Создаем частицы для фона
  function createParticles() {
    const container = document.getElementById('particles');
    for (let i = 0; i < 40; i++) {
      const particle = document.createElement('div');
      particle.classList.add('particle');
      particle.style.left = Math.random() * 100 + 'vw';
      particle.style.top = Math.random() * 100 + 'vh';
      particle.style.width = Math.random() * 3 + 1 + 'px';
      particle.style.height = particle.style.width;
      particle.style.animationDelay = Math.random() * 15 + 's';
      particle.style.animationDuration = Math.random() * 10 + 10 + 's';
      container.appendChild(particle);
    }
  }

  const blank = {
    cryo: 0,
    components: 0,
    blueprints: 0,
    modsBuilt: 0,
    level: 1,
    inventory: [],               // [{id,name}]
    modules: { calibrated:false, frequency: 0, installed: [] },
    log: []
  };
  let S = load();

  function save(){ localStorage.setItem('neolab-blue', JSON.stringify(S)); }
  function load(){
    try{
      return Object.assign({}, blank, JSON.parse(localStorage.getItem('neolab-blue')||'{}'));
    }catch(e){ return structuredClone(blank); }
  }
  function toast(msg){ const t = $('#toast'); t.textContent = msg; t.classList.add('show'); setTimeout(()=>t.classList.remove('show'), 1600); }

  // ---------- Router ----------
  const routes = { processor, lab, mods, shop, format, god, welcome };
  const view = $('#view');

  function go(name){
    const fn = routes[name] || routes['welcome'];
    view.innerHTML = fn();
    attach(name);
    highlightNav(name);
    save();
    view.scrollTop = 0;
  }
  function highlightNav(name){
    $$('.nav-btn').forEach(b=>b.classList.toggle('active', b.dataset.view===name));
  }

  // ---------- Views ----------
  function welcome(){
    return `
      <section class="panel">
        <div class="ascii-art">
░██████╗░███████╗███╗░░██╗███████╗░█████╗░██████╗░
██╔════╝░██╔════╝████╗░██║██╔════╝██╔══██╗██╔══██╗
██║░░██╗░█████╗░░██╔██╗██║█████╗░░██║░░██║██████╔╝
██║░░╚██╗██╔══╝░░██║╚████║██╔══╝░░██║░░██║██╔══██╗
╚██████╔╝███████╗██║░╚███║███████╗╚█████╔╝██║░░██║
░╚═════╝░╚══════╝╚═╝░░╚══╝╚══════╝░╚════╝░╚═╝░░╚═╝
        </div>
        <h2>☸ Добро пожаловать в NeoLab</h2>
        <p class="muted">Кибернетический исследовательский комплекс. Используйте навигацию для доступа к системам.</p>
        
        <div class="cyber-line"></div>
        
        <div class="chips mt-12">
          <span class="chip">версия: <b>beta</b></span>
          <span class="chip">статус: <b class="hacker-text">ONLINE</b></span>
          <span class="chip">уровень: <b>${S.level}</b></span>
        </div>
        
        <div class="cyber-line"></div>
        
        <div class="mt-16 grid-2">
          <button class="btn btn--primary" data-go="processor">🔎 Открыть процессор</button>
          <button class="btn btn--ghost" data-go="lab">🧪 В лабораторию</button>
        </div>
        
        <div class="ascii-art mt-16">
╔════════════════════════════════╗
║    СИСТЕМА ГОТОВА К РАБОТЕ     ║
╚════════════════════════════════╝
        </div>
      </section>
    `;
  }

  function processor(){
    return `
      <section class="panel">
        <h2>⚙️ Процессор</h2>
        <p class="muted">Центральный источник отслеживания ваших результатов в комплексе.</p>
        
        <div class="cyber-line"></div>
        
        <div class="mt-12 grid-2">
          <div class="kpi">Крио‑Геном <strong>${S.cryo}</strong></div>
          <div class="kpi">Компоненты <strong>${S.components}</strong></div>
          <div class="kpi">Чертежи <strong>${S.blueprints}</strong></div>
          <div class="kpi">Модификаций <strong>${S.modsBuilt}</strong></div>
          <div class="kpi">Уровень <strong>${S.level}</strong></div>
          <div class="kpi">Инвентарь <strong>${S.inventory.length}</strong></div>
        </div>
        
        <div class="cyber-line"></div>
        
        <div class="mt-16 grid-2">
          <button class="btn btn--primary" data-go="lab">🧪 Извлечь Крио‑Геном</button>
          <button class="btn" data-go="mods">🧬 Калибровать модуль</button>
        </div>
      </section>

      <section class="panel">
        <h2>🧾 Последние события</h2>
        <div class="note">${(S.log.slice(-5).reverse().map(x=>'>> '+x).join('<br>')) || 'Журнал событий пуст.'}</div>
      </section>
    `;
  }

  function lab(){
    return `
      <section class="panel">
        <h2>☢️ Лаборатория</h2>
        <p class="muted">Передовой центр добычи и изучения. Здесь можно извлекать <b>Крио‑Геном</b> и <b>Компоненты</b>, создавать чертежи.</p>
        
        <div class="cyber-line"></div>
        
        <div class="mt-12">
          <div class="field">
            <label>ИЗВЛЕЧЕНИЕ КРИО-ГЕНОМА</label>
            <div class="progress"><b id="pbar"></b></div>
          </div>
          <div class="grid-2 mt-12">
            <button class="btn btn--good" id="extract">🚀 Запустить процесс</button>
            <button class="btn" id="extractComponents">⚒️ Синтез компонентов</button>
          </div>
        </div>
        
        <div class="cyber-line"></div>
        
        <div class="mt-16 grid-2">
          <button class="btn" id="makeBlueprint">📐 Создать чертёж</button>
          <button class="btn btn--ghost" data-go="tree">🌫️ Древо исследований</button>
        </div>
        
        <div class="ascii-art mt-16">
┌───────────────────────┐
│  ЛАБОРАТОРИЯ АКТИВНА  │
└───────────────────────┘
        </div>
      </section>
    `;
  }

  function mods(){
    return `
      <section class="panel">
        <h2>🧬 Модификации</h2>
        <p class="muted">Тайная комната для калибровки и настройки частоты модуля.</p>
        
        <div class="cyber-line"></div>
        
        <div class="grid-2 mt-12">
          <button class="btn ${S.modules.calibrated ? '' : 'btn--primary'}" id="calibrate">⚙️ Калибровка модуля</button>
          <button class="btn" id="freq">📶 Частотная настройка</button>
        </div>
        
        <div class="mt-16">
          <div class="kpi">Частота <strong>${S.modules.frequency || 0} Гц</strong></div>
        </div>
        
        <div class="cyber-line"></div>
        
        <div class="mt-16">
          <button class="btn" id="install">🧩 Установка модулей в имплант</button>
        </div>
        
        <div class="mt-16">
          <button class="btn" id="buildMod">🛠️ Получить модификатор</button>
          <div class="note mt-8">Тратит: 1 чертёж + 3 компонента</div>
        </div>
        
        <div class="ascii-art mt-16">
╔════════════════╗
║   ДНК-МОДЫ     ║
║   АКТИВНЫ      ║
╚════════════════╝
        </div>
      </section>
    `;
  }

  function shop(){
    const items = [
      {id:'neuro-01', name:'Нейро‑мод 01', desc:'Базовая стабилизация отклика', price:5},
      {id:'stabilizer', name:'Стабилизатор поля', desc:'Снижает шум на 12%', price:2},
      {id:'sensor', name:'Сенсор спектров', desc:'Открывает скрытые слои', price:4}
    ];
    // Store in dataset for handlers
    window.__shop = items;
    return `
      <section class="panel">
        <h2>➕ Имплант‑Бутик</h2>
        <p class="muted">Покупка и обмен модификациями за <b>Крио‑Геном</b>. Баланс: <b>${S.cryo}</b></p>
        
        <div class="cyber-line"></div>
        
        <div class="mt-12">
          ${items.map(it => `
            <div class="item mt-8">
              <div style="width:38px;height:38px;border-radius:8px;border:1px solid var(--border);box-shadow:var(--glow);background:linear-gradient(135deg, rgba(55,166,255,.3), rgba(55,166,255,.06));"></div>
              <div style="flex:1">
                <div><strong>${it.name}</strong> · <span class="price">${it.price} Ⓚ</span></div>
                <div class="meta">${it.desc}</div>
              </div>
              <button class="btn" data-buy="${it.id}" style="width:auto;padding:10px 12px">Купить</button>
            </div>
          `).join('')}
        </div>
      </section>

      <section class="panel">
        <h2>☁️ Обмен</h2>
        <div class="field">
          <label>Направление</label>
          <select id="exDir">
            <option value="c2g">Компоненты → Крио‑Геном (5:1)</option>
            <option value="g2c">Крио‑Геном → Компоненты (1:4)</option>
          </select>
        </div>
        <div class="grid-2 mt-12">
          <div class="field"><label>Количество</label><input id="exAmount" type="number" min="1" value="1"/></div>
          <button class="btn btn--primary" id="doExchange">Обменять</button>
        </div>
        <div class="note mt-8">Баланс: ${S.components} компонентов · ${S.cryo} Ⓚ</div>
        
        <div class="ascii-art mt-16">
┌───────────────┐
│   ОБМЕННИК    │
│   АКТИВЕН     │
└───────────────┘
        </div>
      </section>
    `;
  }

  function format(){
    return `
      <section class="panel">
        <h2>♻️ Форматирование</h2>
        <p class="muted">Раздел в разработке. Скоро появится кастомизация интерфейса и экспорт профиля.</p>
        
        <div class="cyber-line"></div>
        
        <div class="chips mt-12">
          <span class="chip">темы: <b>нео‑blue</b></span>
          <span class="chip">хранилище: <b>local</b></span>
          <span class="chip">статус: <b>стабильный</b></span>
        </div>
        
        <div class="cyber-line"></div>
        
        <div class="mt-16">
          <button class="btn btn--danger">♻️ Сбросить прогресс</button>
          <div class="note mt-8">Осторожно: это действие необратимо</div>
        </div>
        
        <div class="ascii-art mt-16">
╔══════════════════════╗
║   СИСТЕМНЫЕ ФАЙЛЫ   ║
║   ЗАЩИЩЕНЫ          ║
╚══════════════════════╝
        </div>
      </section>
    `;
  }

  function god(){
    return `
      <section class="panel">
        <h2>✨ Обратиться к Богу</h2>
        <div class="note">Доступные команды: <b>/start</b> — начать работу · <b>/help</b> — справка</div>
        
        <div class="cyber-line"></div>
        
        <div class="mt-12 field">
          <label>Сообщение</label>
          <input id="godInput" type="text" placeholder="/start или вопрос…" />
        </div>
        <div class="mt-12 grid-2">
          <button class="btn btn--primary" id="sendGod">Отправить</button>
          <button class="btn btn--ghost" id="seed">Вставить демо</button>
        </div>
        
        <div class="cyber-line"></div>
        
        <div class="mt-16" id="godLog">${renderGodLog()}</div>
        
        <div class="ascii-art mt-16">
███████╗░█████╗░██████╗░
██╔════╝██╔══██╗██╔══██╗
█████╗░░██║░░██║██║░░██║
██╔══╝░░██║░░██║██║░░██║
██║░░░░░╚█████╔╝██████╔╝
╚═╝░░░░░░╚════╝░╚═════╝░
        </div>
      </section>
    `;
  }

  function renderGodLog(){
    if(!S.god) S.god = [];
    if(!S.god.length) return '<div class="note">Диалог пуст.</div>';
    return S.god.slice(-12).map(m => `
      <div class="panel" style="padding:10px;margin-bottom:8px;background:${m.me? 'rgba(55,166,255,.08)' : 'rgba(12,24,48,.55)'}">
        <div class="meta">${m.me?'>> ВЫ':':: БОГ'}</div>
        <div style="margin-top:4px">${m.text}</div>
      </div>`).join('');
  }

  // ---------- Handlers ----------
  function attach(name){
    // Global internal links
    $$("[data-go]").forEach(b=>b.addEventListener('click', e=>go(b.dataset.go)));

    if(name==='lab'){
      $('#extract').addEventListener('click', () => {
        const p = $('#pbar'); p.style.width='0%';
        let w = 0;
        const t = setInterval(()=>{
          w += Math.random()*22;
          p.style.width = Math.min(w, 100)+'%';
          if(w>=100){ clearInterval(t);
            const gain = 1 + Math.floor(Math.random()*3); // 1..3
            S.cryo += gain;
            S.log.push(`Извлечение завершено: +${gain} Крио‑Геном`);
            toast(`Готово: +${gain} Ⓚ`);
            go('lab');
          }
        }, 220);
      });

      $('#extractComponents').addEventListener('click', () => {
        const n = 1 + Math.floor(Math.random()*4);
        S.components += n;
        S.log.push(`Синтез компонентов: +${n}`);
        toast(`+${n} компонентов`);
        go('lab');
      });

      $('#makeBlueprint').addEventListener('click', () => {
        if(S.components < 2){ toast('Нужно 2 компонента'); return; }
        S.components -= 2; S.blueprints += 1;
        S.log.push('Создан чертёж: +1');
        toast('Чертёж создан');
        go('lab');
      });
    }

    if(name==='mods'){
      $('#calibrate').addEventListener('click', ()=>{
        S.modules.calibrated = true; S.level = Math.max(S.level, 2);
        S.log.push('Калибровка выполнена');
        toast('Модуль откалиброван');
        go('mods');
      });
      $('#freq').addEventListener('click', ()=>{
        const val = Math.floor(7 + Math.random()*93);
        S.modules.frequency = val;
        S.log.push(`Частота установлена на ${val} Гц`);
        toast(`Частота: ${val} Гц`);
        go('mods');
      });
      $('#install').addEventListener('click', ()=>{
        if(!S.inventory.length){ toast('Нет модулей для установки'); return; }
        const it = S.inventory.shift();
        S.modules.installed.push(it);
        S.modsBuilt += 1;
        S.log.push(`Установлен модуль: ${it.name}`);
        toast(`Установлено: ${it.name}`);
        go('mods');
      });
      $('#buildMod').addEventListener('click', ()=>{
        if(S.blueprints < 1 || S.components < 3){ toast('Нужно 1 чертёж и 3 компонента'); return; }
        S.blueprints -= 1; S.components -= 3;
        const id = 'mod-'+Math.random().toString(16).slice(2,6);
        const name = 'Мод‑'+id.slice(-3).toUpperCase();
        S.inventory.push({id, name});
        S.log.push(`Получен модификатор: ${name}`);
        toast(`Получен: ${name}`);
        go('mods');
      });
    }

    if(name==='shop'){
      $$('#view [data-buy]').forEach(btn => btn.addEventListener('click', () => {
        const id = btn.dataset.buy;
        const item = (window.__shop||[]).find(x => x.id===id);
        if(!item) return;
        if(S.cryo < item.price){ toast('Недостаточно Крио‑Генома'); return; }
        S.cryo -= item.price;
        S.inventory.push({id:item.id, name:item.name});
        S.log.push(`Куплено: ${item.name} (-${item.price} Ⓚ)`);
        toast('Куплено: '+item.name);
        go('shop');
      }));

      $('#doExchange').addEventListener('click', ()=>{
        const dir = $('#exDir').value;
        let n = Math.max(1, Math.floor(+$('#exAmount').value||1));
        if(dir==='c2g'){
          const need = 5*n;
          if(S.components < need){ toast(`Нужно ${need} компонентов`); return; }
          S.components -= need; S.cryo += n;
          S.log.push(`Обмен: -${need} комп. +${n} Ⓚ`);
        }else{
          if(S.cryo < n){ toast(`Нужно ${n} Ⓚ`); return; }
          S.cryo -= n; const comp = 4*n; S.components += comp;
          S.log.push(`Обмен: -${n} Ⓚ +${comp} комп.`);
        }
        toast('Обмен выполнен');
        go('shop');
      });
    }

    if(name==='god'){
      $('#sendGod').addEventListener('click', sendGod);
      $('#seed').addEventListener('click', ()=>{
        S.god = (S.god||[]);
        S.god.push({me:true, text:'/start'});
        S.god.push({me:false, text:'NeoLab [BLUE] слушает. Доступны /help и базовые запросы.'});
        S.god.push({me:true, text:'Как повысить уровень?'});
        S.god.push({me:false, text:'Извлекайте Крио‑Геном, создавайте чертежи и устанавливайте модули — опыт придёт.'});
        go('god');
      });
    }
  }

  function sendGod(){
    const input = $('#godInput');
    const text = (input.value||'').trim();
    if(!text) return;
    S.god = (S.god||[]); S.god.push({me:true, text});
    let reply = '…';
    if(text.startsWith('/start')) reply = 'Готов к работе. Нажмите кнопки внизу для навигации.';
    else if(text.startsWith('/help')) reply = 'Команды: /start, /help. Действия: извлечение, калибровка, покупка модов.';
    else reply = 'Я слышу тебя. Лаборатория поможет добыть Ⓚ, магазин — конвертировать ресурсы.';
    S.god.push({me:false, text:reply});
    input.value = '';
    go('god');
  }

  // ---------- Init ----------
  createParticles(); // Создаем частицы для фона
  go('welcome');
  $$('.nav-btn').forEach(b => b.addEventListener('click', ()=>go(b.dataset.view)));

  </script>
</body>
</html>
